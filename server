import socket
import threading
import json
from datetime import datetime

# Use '0.0.0.0' to accept connections from any network interface
HOST = "0.0.0.0"
PORT = 65432

attendance_records = {}  # Format: {username: {"status": "", "left_time": ""}}
connected_clients = {}

def broadcast_update():
    data = {"action": "update", "data": attendance_records}
    for username, conn in list(connected_clients.items()):
        try:
            conn.send(json.dumps(data).encode("utf-8"))
        except:
            del connected_clients[username]
            if username in attendance_records:
                del attendance_records[username]

def handle_client(conn, addr):
    print(f"Connected: {addr}")
    username = None
    
    try:
        while True:
            data = conn.recv(1024).decode("utf-8")
            if not data:
                break
                
            try:
                message = json.loads(data)
                action = message.get("action")
                username = message.get("username")
                
                if action == "login":
                    connected_clients[username] = conn
                    attendance_records[username] = {
                        "status": "absent",
                        "left_time": ""
                    }
                    
                elif action == "start_timer":
                    if username in attendance_records:
                        attendance_records[username] = {
                            "status": "present",
                            "left_time": ""
                        }
                    
                elif action == "mark_present":
                    if username in attendance_records:
                        attendance_records[username] = {
                            "status": "present",
                            "left_time": ""
                        }
                    
                elif action == "disconnected":
                    if username in attendance_records:
                        attendance_records[username] = {
                            "status": "absent",
                            "left_time": message.get("status", "")
                        }
                
                broadcast_update()
                
            except json.JSONDecodeError:
                print(f"Invalid JSON received from {addr}")
                
    except Exception as e:
        print(f"Error with {addr}: {e}")
    finally:
        if username and username in connected_clients:
            del connected_clients[username]
        if username and username in attendance_records:
            del attendance_records[username]
        conn.close()
        broadcast_update()
        print(f"Disconnected: {addr}")

def start_server():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        try:
            s.bind((HOST, PORT))
            s.listen()
            print(f"Server running on {HOST}:{PORT}")
            
            while True:
                conn, addr = s.accept()
                threading.Thread(target=handle_client, args=(conn, addr)).start()
                
        except Exception as e:
            print(f"Failed to start server: {e}")

if __name__ == "__main__":
    start_server()
