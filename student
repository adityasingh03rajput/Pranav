import tkinter as tk
from tkinter import messagebox
import json
import os
import socket
import threading
from datetime import datetime

# Server configuration - UPDATE THIS TO YOUR SERVER'S PUBLIC IP
HOST = "192.168.1.10"  # Replace with actual server IP
PORT = 65432

# File to store user data
USER_FILE = "users.json"

class StudentApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Student Attendance System")
        self.setup_ui()
        self.connect_to_server()
        self.root.mainloop()

    def setup_ui(self):
        self.root.geometry("300x200")
        
        # Username Label and Entry
        tk.Label(self.root, text="Username:").pack(pady=5)
        self.entry_username = tk.Entry(self.root)
        self.entry_username.pack(pady=5)
        
        # Password Label and Entry
        tk.Label(self.root, text="Password:").pack(pady=5)
        self.entry_password = tk.Entry(self.root, show="*")
        self.entry_password.pack(pady=5)
        
        # Buttons
        tk.Button(self.root, text="Signup", command=self.signup).pack(pady=5)
        tk.Button(self.root, text="Login", command=self.login).pack(pady=5)
        
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

    def connect_to_server(self):
        self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            self.client_socket.connect((HOST, PORT))
            threading.Thread(target=self.receive_messages, daemon=True).start()
        except ConnectionRefusedError:
            messagebox.showerror("Connection Error", "Failed to connect to server. Make sure server is running.")
            self.root.destroy()

    def send_data(self, action, username=None, status=None):
        try:
            data = {"action": action, "username": username, "status": status}
            self.client_socket.send(json.dumps(data).encode("utf-8"))
        except (ConnectionError, OSError) as e:
            messagebox.showerror("Connection Error", f"Failed to send data: {e}")

    def load_users(self):
        if os.path.exists(USER_FILE):
            with open(USER_FILE, "r") as file:
                return json.load(file)
        return {}

    def save_users(self, users):
        with open(USER_FILE, "w") as file:
            json.dump(users, file, indent=4)

    def signup(self):
        username = self.entry_username.get()
        password = self.entry_password.get()

        if not username or not password:
            messagebox.showwarning("Input Error", "Please fill in all fields.")
            return

        users = self.load_users()
        if username in users:
            messagebox.showwarning("Signup Error", "Username already exists.")
            return

        users[username] = password
        self.save_users(users)
        messagebox.showinfo("Signup Success", "Signup successful!")
        self.clear_entries()

    def login(self):
        username = self.entry_username.get()
        password = self.entry_password.get()

        if not username or not password:
            messagebox.showwarning("Input Error", "Please fill in all fields.")
            return

        users = self.load_users()
        if username in users and users[username] == password:
            messagebox.showinfo("Login Success", "Login successful!")
            self.clear_entries()
            self.root.destroy()
            self.send_data("login", username, "student")
            self.start_attendance_timer(username)
        else:
            messagebox.showerror("Login Failed", "Invalid username or password.")
            self.clear_entries()

    def clear_entries(self):
        self.entry_username.delete(0, tk.END)
        self.entry_password.delete(0, tk.END)

    def start_attendance_timer(self, username):
        timer_window = tk.Tk()
        timer_window.title("Attendance Timer")
        timer_window.geometry("400x250")
        
        tk.Label(timer_window, text="Attendance Timer", font=("Arial", 16)).pack(pady=10)
        status_label = tk.Label(timer_window, text="", font=("Arial", 12))
        status_label.pack(pady=20)
        
        def start_timer():
            self.send_data("start_timer", username)
            status_label.config(text="Timer started - you're marked present")
            
        tk.Button(timer_window, text="Start Timer", command=start_timer).pack(pady=10)
        
        timer_window.mainloop()

    def receive_messages(self):
        while True:
            try:
                data = self.client_socket.recv(1024).decode("utf-8")
                if not data:
                    break
                # Handle server messages if needed
            except:
                break

    def on_closing(self):
        try:
            self.client_socket.close()
        except:
            pass
        self.root.destroy()

if __name__ == "__main__":
    StudentApp()
